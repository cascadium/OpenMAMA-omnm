services:
- docker

# Build worker image (VM template)
environment:
  matrix:

  - DOCKER_IMAGE: ubuntu:16.04
    APPVEYOR_BUILD_WORKER_IMAGE: ubuntu1804
    DISTRO: ubuntu
    DISTRO_VERSION: xenial
    PACKAGE_TYPE: deb

  - DOCKER_IMAGE: ubuntu:18.04
    APPVEYOR_BUILD_WORKER_IMAGE: ubuntu1804
    DISTRO: ubuntu
    DISTRO_VERSION: bionic
    PACKAGE_TYPE: deb

  - DOCKER_IMAGE: ubuntu:20.04
    APPVEYOR_BUILD_WORKER_IMAGE: ubuntu1804
    DISTRO: ubuntu
    DISTRO_VERSION: focal
    PACKAGE_TYPE: deb

  - DOCKER_IMAGE: centos:6
    APPVEYOR_BUILD_WORKER_IMAGE: ubuntu1804
    DISTRO: el
    DISTRO_VERSION: 6
    PACKAGE_TYPE: rpm

  - DOCKER_IMAGE: centos:7
    APPVEYOR_BUILD_WORKER_IMAGE: ubuntu1804
    DISTRO: el
    DISTRO_VERSION: 7
    PACKAGE_TYPE: rpm

  - DOCKER_IMAGE: centos:8
    APPVEYOR_BUILD_WORKER_IMAGE: ubuntu1804
    DISTRO: el
    DISTRO_VERSION: 8
    PACKAGE_TYPE: rpm

  - DOCKER_IMAGE: fedora:30
    APPVEYOR_BUILD_WORKER_IMAGE: ubuntu1804
    DISTRO: fedora
    DISTRO_VERSION: 30
    PACKAGE_TYPE: rpm

  - DOCKER_IMAGE: fedora:31
    APPVEYOR_BUILD_WORKER_IMAGE: ubuntu1804
    DISTRO: fedora
    DISTRO_VERSION: 31
    PACKAGE_TYPE: rpm

  - DOCKER_IMAGE: fedora:32
    APPVEYOR_BUILD_WORKER_IMAGE: ubuntu1804
    DISTRO: fedora
    DISTRO_VERSION: 32
    PACKAGE_TYPE: rpm

  - GENERATOR: Visual Studio 15 2017
    PLATFORM: x86
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
    BUILD_TYPE: RelWithDebInfo
    # NB Can't use JAVA_HOME because appveyor trashes it
    JAVA_HOME_OVERRIDE: C:\Program Files (x86)\Java\jdk1.8.0

  - GENERATOR: Visual Studio 15 2017 Win64
    PLATFORM: x64
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
    BUILD_TYPE: RelWithDebInfo
    # NB Can't use JAVA_HOME because appveyor trashes it
    JAVA_HOME_OVERRIDE: C:\Program Files\Java\jdk1.8.0

before_build:
- sh: export VERSION=$(cat VERSION)
- cmd: set /p VERSION=<VERSION
- cmd: set OPENMAMA_INSTALL_DIR=%APPVEYOR_BUILD_FOLDER%\openmama-omnm-%VERSION%.win.%PLATFORM%
- cmd: vcpkg install openmama:%PLATFORM%-windows

# Build chain tooling
install:
- cmd: set PATH=C:\ProgramData\chocolatey\bin;%PATH%
- sh: sudo apt-get update -qq
- sh: sudo apt-get install -y docker python

build_script:
  # Windows build
- cmd: set PATH=%JAVA_HOME_OVERRIDE%\bin;C:/tools/vcpkg/installed/%PLATFORM%-windows/bin;%PATH%
- cmd: |-
    cd %APPVEYOR_BUILD_FOLDER%
    mkdir build
    cd build
    git clone https://github.com/OpenMAMA/OpenMAMA.git
    cmake -G "%GENERATOR%" -DCMAKE_TOOLCHAIN_FILE=c:/tools/vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_INSTALL_PREFIX="%OPENMAMA_INSTALL_DIR%" -DOPENMAMA_SRC="%APPVEYOR_BUILD_FOLDER%/build/OpenMAMA" -DGTEST_ROOT=C:/tools/vcpkg/installed/%PLATFORM%-windows/ -DMAMA_ROOT=C:/tools/vcpkg/installed/%PLATFORM%-windows/ ..
    cmake --build . --config RelWithDebInfo --target install
    .\src\unittests.exe
    .\UnitTestMamaMsgC.exe -m qpid -p omnmmsg -i O
    .\UnitTestMamaPayloadC.exe -m qpid -p omnmmsg -i O --gtest_filter=-PayloadSubMsgTests.UpdateSubMsg
    cd ..
    7z a openmama-omnm-%VERSION%.win.%PLATFORM%.zip "%OPENMAMA_INSTALL_DIR%"

  # Linux build
- sh: docker build -t omnmdocker . --build-arg IMAGE=$DOCKER_IMAGE --build-arg PACKAGE_TYPE=$PACKAGE_TYPE --build-arg VERSION=$VERSION --build-arg DISTRIB_PACKAGE_QUALIFIER=${DISTRO}${DISTRO_VERSION} 
- sh: docker run -v $(pwd):/app/release --rm omnmdocker
  # Verify the packages are installable
- sh: if [ "$PACKAGE_TYPE" = deb ]; then docker run --rm -v $(pwd):/package $DOCKER_IMAGE /bin/bash -c "apt-get update && apt-get install -y curl && curl -1sLf https://dl.cloudsmith.io/public/openmama/openmama/cfg/setup/bash.deb.sh | bash && apt-get update && apt-get install -y /package/*.deb"; fi
- sh: if [ "$DISTRO" = fedora ]; then docker run --rm -v $(pwd):/package $DOCKER_IMAGE /bin/bash -c "curl -1sLf 'https://dl.cloudsmith.io/public/openmama/openmama/cfg/setup/bash.rpm.sh' | bash && yum install -y openmama && dnf install -y /package/*.rpm"; fi
- sh: if [ "$DISTRO" = el ]; then docker run --rm -v $(pwd):/package $DOCKER_IMAGE /bin/bash -c "yum install -y epel-release && curl -1sLf 'https://dl.cloudsmith.io/public/openmama/openmama/cfg/setup/bash.rpm.sh' | bash && yum install -y openmama && yum install -y /package/*.rpm"; fi

artifacts:
  - path: '*.deb'
    name: OpenMAMA OMNM Ubuntu Package
  - path: '*.rpm'
    name: OpenMAMA OMNM RPM Package
  - path: '*.zip'
    name: OpenMAMA OMNM Windows Release

test: off
